// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    Not(in=address[14], out=nota);
    Not(in=address[13], out=notb);    

    // 対象メモリ領域を判定
    And(a=nota, b=true, out=isRAM);                         // address[14] == 0
    And(a=address[14], b=notb, out=isScreen);               // address[14] == 1 && address[13] == 0
    And(a=address[14], b=address[13], out=isKeyboard);      // address[14] == 1 && address[13] == 1

    // 各メモリ領域への実アクセス制御
    And(a=isRAM, b=load, out=loadRAM);
    And(a=isScreen, b=load, out=loadScreen);

    RAM16K(in=in, load=loadRAM, address=address[0..13], out=outRAM);
    Screen(in=in, load=loadScreen, address=address[0..12], out=outScreen);
    Keyboard(out=outKey);

    // アドレスが有効かどうか
    Or(a=isRAM, b=isScreen, out=tmpValid1);
    Or(a=tmpValid1, b=isKeyboard, out=isValid);

    // 定数ゼロ（全ビット false）
    Or16(a=false, b=false, out=zero16);

    // 出力優先度: Keyboard > Screen > RAM > 0
    Mux16(a=outRAM, b=outScreen, sel=isScreen, out=ramOrScreen);
    Mux16(a=ramOrScreen, b=outKey, sel=isKeyboard, out=memOut);
    Mux16(a=zero16, b=memOut, sel=isValid, out=out);
} 